#include <iostream>
struct Node
{
    int key_value;
    Node* left;
    Node* right;
};
void print_tree(Node* btree,int tabs)
{

    if (!btree) return;
    tabs+=5;
    print_tree(btree->left,tabs);
    for (int i = 0; i < tabs; i++) std::cout << " ";
    std::cout << btree->key_value << std::endl;
    print_tree(btree->right,tabs);
    tabs -= 5;
    return;
}
void add_element_from_tree(int aData, Node*& btree)
{
    if (!btree)
    {
        btree = new Node;
        btree->key_value = aData;
        btree->left = NULL;
        btree->right = NULL;
        return;
    }
    else
    {
        if (aData < btree->key_value)
        {
            add_element_from_tree(aData, btree->left);
        }
        else if (aData > btree->key_value)
        {
            add_element_from_tree(aData, btree->right);
        }
    }
}
Node*& is_tree_empty(Node*& btree)
{
    if (!btree)
    {
        std::cout << "The tree is empty" << std::endl;
        std::exit;
    }
    else
    {
        std::cout << "The tree is not empty" << std::endl;
        return btree;
    }
}
int search_tree_keys_min(Node*& btree)
{
    if (btree->left != NULL) {
        return search_tree_keys_min(btree->left);
    }
    else {
        return btree->key_value;
    }
}
int search_tree_keys_max(Node*& btree)
{
    if (btree->right != NULL) {
        return search_tree_keys_max(btree->right);
    }
    else {
        return btree->key_value;
    }
}
int switch_tree_keys_max(Node*& btree,int maxkey, int minkey)
{
    if (btree->key_value == maxkey)
    {
        btree->key_value = minkey; 
        return 0;
    }
    switch_tree_keys_max(btree->right, maxkey, minkey);
}
int switch_tree_keys_min(Node*& btree, int maxkey, int minkey)
{
    if (btree->key_value == minkey)
    {
        btree->key_value = maxkey; 
        return 0;
    }
    switch_tree_keys_min(btree->left, maxkey, minkey);
}
void destroy_tree(Node* btree)
{
    if (!btree) return;
    destroy_tree(btree->left);
    destroy_tree(btree->right);
}
void dialog_with_the_user()
{
    int tabs = 0;
    int amount, number;
    Node* tree = NULL;
    std::cout << "Input amount: ";
    std::cin >> amount;
    for (int i = 0; i < amount;i++)
    {
        std::cin >> number;
        add_element_from_tree(number,tree);
    }
    is_tree_empty(tree);
    print_tree(tree, tabs);
    int minkey = search_tree_keys_min(tree);
    int maxkey = search_tree_keys_max(tree);
    switch_tree_keys_max(tree, maxkey, minkey);
    switch_tree_keys_min(tree, maxkey, minkey);
    std::cout << "-----------------\n";
    print_tree(tree, tabs);
    destroy_tree(tree);
}
int main()
{
    dialog_with_the_user();
}
