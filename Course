#include <iostream>
#include <cmath>
#include <iomanip>
#include <cstdio>
#include <conio.h>
#include <Windows.h>
#pragma warning (disable : 4996)

void read_information(long double&, long double&, long double&, long double&);
void read_information_from_file(long double&, long double&, long double&, long double&);
void read_information_from_console(long double&, long double&, long double&, long double&);
bool examination(long double, long double, long double, long double);

void create_table(long double, long double, long double, long double);

void write_information_from_file(long double, long double, long double, int);

/*
* Функція, яка визивається на початку програми для того, щоб користувач вибрав звідки зчитувати інформацію
* 1 - з файлу
* 2 - з консолі
* Далі за допомогою циклу і функції examination перевіряються вхідні данні
*/
void read_information(long double& start, long double& end, long double& delta, long double& accuracy)
{
	int select = 0;
	while (select < 1 || select >2)
	{
		std::cout << "Select an action:\n1 - Read information from file\n2 - Read information from console\nAction: ";
		std::cin >> select;
		system("cls");
	}
	do
	{
		if (select == 1)
			read_information_from_file(start, end, delta, accuracy);
		else
			read_information_from_console(start, end, delta, accuracy);
		system("cls");
	} while (examination(start, end, delta, accuracy) == false);
}
/*
* Функція для зчитування з консолі інформації
*/
void read_information_from_console(long double& start, long double& end, long double& delta, long double& accuracy)
{
	std::cout << "Enter start : ";
	std::cin >> start;

	std::cout << "Enter end : ";
	std::cin >> end;

	std::cout << "Enter delta : ";
	std::cin >> delta;

	std::cout << "Enter accuracy : ";
	std::cin >> accuracy;

}
/*
* Функція для перевірки вхідних данних, якщо ні одна з умов не справдиться, то вона поверне true
*/
bool examination(long double start, long double end, long double delta, long double accuracy)
{
	if (end < start) return false;
	else if (delta < 0) return false;
	else if (end == start && delta != 0) return false;
	else if (accuracy <= 0 || accuracy >= 1) return false;
	return true;

}
/*
* Рекурсивна функція котра обраховує n-ний член ряду.
*/
long double x_series(long double x, long double accuracy, long double current, int& n)
{
	long double q = (pow((2 * n + 1), 2) * pow(x, 2)) / (2 * (n + 1) * (2 * n + 3));
	if (abs(pow(x, 2 * n + 1) / (1 - x * x)) <= accuracy)
	{
		return current;
	}
	n++;
	return current + x_series(x, accuracy, current * q, n);

}
/*
* Функція котра зчитує інформацію з файлу з назвою якою ввів користувач, якщо файлу не буде, то
* функція буде ще раз визиватися.
*/
void read_information_from_file(long double& start, long double& end, long double& delta, long double& accuracy)
{
	FILE* file;
	char filename[200];
	std::cout << "Enter filename : ";
	std::cin >> filename;
	file = fopen(filename, "r");
	if (file != NULL)
	{
		fscanf(file, "%lf %lf %lf %lf", &start, &end, &delta, &accuracy);
	}
}

/*
* Функція яка генерує кінцеву таблицю виводяти інформацію інераційно і записуючи її до файл.
*/
void create_table(long double Xbegin, long double Xend, long double Xdelta, long double accuracy)
{
	std::cout << "----------------------------------------------------------------------" << std::endl;
	std::cout << "|   x   |   series(x)   |    y(x)    |   absolute error   |   steps  |" << std::endl;
	std::cout << "----------------------------------------------------------------------" << std::endl;
	for (; Xbegin <= Xend; Xbegin += Xdelta)
	{
		long double functionX = asin(Xbegin);
		int steps = 0;
		long double seriesX = x_series(Xbegin, accuracy, Xbegin, steps);


		std::cout << '|' << std::setprecision(2) << std::setw(7) << Xbegin;

		std::cout << '|' << std::setprecision(5) << std::setw(15) << seriesX;

		std::cout << '|' << std::setprecision(5) << std::setw(12) << functionX;

		std::cout << '|' << std::setprecision(7) << std::setw(20) << abs(seriesX - functionX);

		std::cout << '|' << std::setprecision(5) << std::setw(10) << steps << '|' << std::endl;

		std::cout << "----------------------------------------------------------------------" << std::endl;

		write_information_from_file(Xbegin, seriesX, functionX, steps);
	}
}
/*
* Функція на початку її роботи записує до файлу назви стовпчиків і перший рядок значень,
* після чого бульова функція змінює своє значення з true на false і продовжує записувати до файлу тільки значення
*/
void write_information_from_file(long double Xbegin, long double seriesX, long double functionX, int steps)
{
	static bool count = 1;
	if (count == 1)
	{
		FILE* fileWrite = fopen("output.txt", "wt");
		if (fileWrite != NULL)
		{
			fprintf(fileWrite, "x,series(x),F(x),absolute error,steps\n");
			fprintf(fileWrite, "%.5lf,%.18lf,%.18lf,%.18lf,%u\n", Xbegin, seriesX, functionX, abs(seriesX - functionX), steps);
			if (fclose(fileWrite) == EOF) std::cout << "File was not closed!\n";
		}
		count = 0;
	}
	else
	{
		FILE* fileWrite = fopen("output.txt", "a+t");
		if (fileWrite != NULL)
		{
			fprintf(fileWrite, "%.5lf,%.18lf,%.18lf,%.18lf,%u\n", Xbegin, seriesX, functionX, abs(seriesX - functionX), steps);
			if (fclose(fileWrite) == EOF) std::cout << "File was not closed!\n";
		}
	}
}
/*
* Головна частина коду для визову функцій
*/
int main()
{
	system("color 03");
	long double Xbegin(0), Xend(0), Xdelta(0), accuracy(0);
	read_information(Xbegin, Xend, Xdelta, accuracy);
	create_table(Xbegin, Xend, Xdelta, accuracy);

	return 0;
}
